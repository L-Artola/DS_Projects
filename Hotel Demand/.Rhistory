average <- apply(data, Solar.R,1, mean, na.rm = TRUE)
average
average <- mean(data, Solar.R, mean, na.rm = TRUE)
mean(data$Solar.R)
colMean(data, Solar.R, na_rm = TRUE)
colmean(data, Solar.R, na_rm = TRUE)
colMeans(data, Solar.R, na_rm = TRUE)
data
data <- data("airquality")
data
data("airquality")
airquality
colMeans(airquality, Solar.R, na_rm = TRUE)
mean(airquality, [,2], na.r = TRUE)
mean(airquality, Solar.R, na.r = TRUE)
airquality.colMeans(Solar.R, na.rm = TRUE)
colMeans(Solar.R, na.rm = TRUE)
colMeans(airquality, Solar.R, na.rm = TRUE)
mean(airquality[Solar.R])
class(airquality)
mean(airquality["Solar.R"])
mean(airquality["Solar.R"], na.rm = TRUE)
data <- data("airquality")
class(data)
data <- data("airquality")
data
mean(airquality["Solar.R"], na.rm = TRUE)
data <- data("airquality")
data
summarise(airquality, solar = mean(Solar.R, na.rm = TRUE))
replacement <- replace(is.na(airquality, Solar.R), mean)
replacement <- replace(is.na(airquality[Solar.R]), mean)
mean <- summarise(airquality, solar = mean(Solar.R, na.rm = TRUE))
replacement <- replace(is.na(airquality[Solar.R]), mean)
na.mean(airquality[Solar.R])
library(dplyr)
mean <- summarise(airquality, solar = mean(Solar.R, na.rm = TRUE))
airquality %>%
select(Solar.R) %>%
is.na() == mean
for(i in Solar.R(airquality)){
airquality[is.na(Solar.R[,i]), i] <- mean(Solar.R[,i], na.rm = TRUE)
for(i in Solar.R(airquality)){
airquality[is.na(Solar.R[,i]), i] <- mean(Solar.R[,i], na.rm = TRUE)
}
library(dplyr)
library(tidyverse)
library(ggplot2)
install.packages("devtools")
library("devtools")
install_github("kosukeimai/qss-package", build_vignettes = TRUE)
library("qss")
install.packages("devtools")
library(dplyr)
library(tidyverse)
library(ggplot2)
install.packages("devtools")
library("devtools")
install_github("kosukeimai/qss-package", build_vignettes = TRUE)
data(social)
library(dplyr)
library(tidyverse)
library(ggplot2)
install.packages("devtools")
library("devtools")
install_github("kosukeimai/qss-package", build_vignettes = TRUE)
data(social)
data('social', package = 'qss')
library(dplyr)
library(tidyverse)
library(ggplot2)
install.packages("devtools")
library("devtools")
install_github("kosukeimai/qss-package", build_vignettes = TRUE)
install.packages("devtools")
data('social', package = 'qss')
data('social', package = 'qss')
data('social')
library(dplyr)
library(tidyverse)
library(ggplot2)
library("devtools")
library("qss")
data('social', package = 'qss')
data('social')
knitr::opts_chunk$set(echo = TRUE)
install.packages("tidyverse")
library(dplyr)
install.packages("devtools")
library("devtools")
install_github("kosukeimai/qss-package", build_vignettes = TRUE)
1
library("qss")
data("social", package = "qss")
summary(social)
#turnout for each group
social %>%
group_by(messages) %>%
summarise(turnout_each_group = mean(primary2006, na.rm = TRUE))
#turnout for control group
social %>%
group_by(messages) %>%
filter(messages == "Control") %>%
summarise(turnout_control_group = mean(primary2006, na.rm = TRUE))
# subtract control group turnout from each group
control_turnout <- social %>%
filter(messages == "Control") %>%
summarise(turnout_control_group = mean(primary2006, na.rm = TRUE))
social %>%
group_by(messages) %>%
summarise(avg_causal_effect = mean(primary2006, na.rm = TRUE) - control_turnout[1, 1])
# tapply(social$age, social$messages, mean)
social$age <- 2006 - social$yearofbirth
social %>%
group_by(messages) %>%
summarise(age_each_group = mean(age, na.rm = TRUE))
#  tapply(social$primary2004, social$messages, mean)
social %>%
group_by(messages) %>%
summarise(turn_out_each_group_2004 = mean(primary2004, na.rm = TRUE))
#  tapply(social$hhsize, social$messages, mean)
social %>%
group_by(messages) %>%
summarise(household_size_each_group = mean(hhsize, na.rm = TRUE))
library(dplyr)
library(ggplot2)
data(airquality)
airquality.tail(6)
tail(airquality, 6)
airquality2 <- airquality[-c((nrow(airquality) - 5L):nrow(airquality)),]
tail(airquality2)
data(airquality)
airquality2 <- airquality[-c((nrow(airquality) - 3L):nrow(airquality)),]
tail(airquality2)
data(airquality)
airquality2 <- airquality[-c((nrow(airquality) - 1L):nrow(airquality)),]
tail(airquality2)
data(airquality)
airquality2 <- airquality[-c((nrow(airquality) - 0L):nrow(airquality)),]
tail(airquality2)
view(airquality$month.abb)
airquality$Month <- factor(airquality$Month, levels = 1:12,
labels = month.abb, ordered = TRUE)
table(airquality$Month)
airquality$Wind <- airquality$Wind * 1.609344 # now in km / hour
head(airquality)
ggplot::mpg
library(tidyverse)
library(ggplot2)
data(mpg)
mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x =displ, y = hwy))
install.packages(tidyverse)
install.packages("tidyverse")
install.packages("dpylr")
install.packages("tidyr")
install.packages("ggplot2")
install.packages("tidyverse")
install.packages("https://github.com/kosukeimai/qss-package/archive/master.tar.gz", repos = NULL)
install.packages("broom")
install.packages("forcats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("tibble")
install.packages("corrplot")
install.packages("caret")
install.packages("ISLR")
install.packages("devtools")
library("devtools")
install_github("kosukeimai/qss-package", build_vignettes = TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("devtools")
data(congress, package="qss")
view(congress)
head(congress)
congress$state
a <- c(10, 2, 5, 2)
b <- c(4, 15, 6, 8)
c <- c(2, 6, 8)
d <- c(1, 15, 2)
e <- c(14, 17, 11, 10)
f <- c(20, 4, 10, 4)
source('~/.active-rstudio-document', echo=TRUE)
a+b
a+c
b-e
15*c
-3*f
sqrt(crossprod(b))
sqrt(b*b)
sqrt(sum(b*b))
sqrt(crossprod(b))
length_cpd <- sqrt(crossprod(c+d))
length_cpd
dataset <- read.csv("dataset.csv")
regular <- prcomp(dataset, scale. = TRUE)
factoextra::fviz_pca_biplot(regular) + ggtitle("Not robust PCA")
library(data.table)
library(plyr)
library(ggplot2)
gss = read.csv(file.choose())
GSS = gss
vars <- c("libcom", "year", "age")
data <- gss[, vars]
colnames(data)
data <- na.omit(data)
by.year <- ddply(data, "year", summarise, mean = mean(libcom))
plot(by.year, type = "l", lwd = 2, col = "black", bty = "l")
with(by.year, abline(line(year, mean), col = "red", lwd = 2, lty = 1)
plot(by.year, type = "l", lwd = 2, col = "black", bty = "l")
m1 = lm(libcom ~ year, data)
summary(m1)
summary(data)
data$yearsq = data$year*data$year
m2 = lm(libcom ~ year + yearsq)
m1 = lm(libcom ~ year, data)
summary(m1)
data$yearsq = data$year*data$year
m2 = lm(libcom ~ year + yearsq, data)
summary(data)
by.year.sq <- ddply(data, "yearsq", summarise, mean = mean(libcom))
plot(by.year.sq, type = "l", lwd = 2, col = "black", bty = "l")
with(by.year.sq, abline(line(year, mean), col = "red", lwd = 2, lty = 1)
plot(by.year.sq, type = "l", lwd = 2, col = "black", bty = "l")
data$old = ifelse(data$age>=40, 1,0)
by.year.old <- ddply(data, c("year", "old"), summarise,
mean = mean(libcom, na.rm = T))
color_and_labels <- scale_color_manual(values = c("navyblue", "darkred"),
labels = c("not old","old"), name = "")
g_by.year.old <- ggplot(by.year.old, aes(x=year, y=mean, group=old, color = factor(old)))
g_by.year.old <- g_by.year.old + geom_line()
g_by.year.old + color_and_labels
g_quad <- g_by.year.old + stat_smooth(method = "lm", formula = y ~ poly(x,2), se = F, lty = 2)
g_quad + color_and_labels
g_by.year.old <- g_by.year.old + geom_line()
g_by.year.old + color_and_labels
m3 = lm(libcom ~ year + yearsq , data, subset = old==1)
summary(lm3)
m3 = lm(libcom ~ year + yearsq , data, subset = old==1)
summary(m3)
m4 = lm(libcom) ~ year + yearsq , data, subset = old==0)
m4 = lm(libcom ~ year + yearsq , data, subset = old==0)
summary(m4)
m1 = lm(libcom ~ year, data)
summary(m1)
options(scipen=999)
m1 = lm(libcom ~ year, data)
summary(m1)
by.year <- ddply(data, "year", summarise, mean = mean(libcom))
plot(by.year, type = "l", lwd = 2, col = "black", bty = "l")
with(by.year, abline(line(year, mean), col = "red", lwd = 2, lty = 1)
data$old = ifelse(data$age>=40, 1,0)
data$old = ifelse(data$age>=40, 1,0)
by.year.old <- ddply(data, c("year", "old"), summarise,
mean = mean(libcom, na.rm = T))
color_and_labels <- scale_color_manual(values = c("navyblue", "darkred"),
labels = c("not old","old"), name = "")
g_by.year.old <- ggplot(by.year.old, aes(x=year, y=mean, group=old, color = factor(old)))
g_by.year.old <- g_by.year.old + geom_line()
g_by.year.old + color_and_labels
g_quad <- g_by.year.old + stat_smooth(method = "lm", formula = y ~ poly(x,2), se = F, lty = 2)
g_quad + color_and_labels
m2 = lm(libcom ~ yearsq, data)
summary(data)
m2 = lm(libcom ~ yearsq, data)
summary(m2)
m2 = lm(libcom ~ year + yearsq, data)
summary(m2)
predict(logit1, type = "response", newdata = data.frame(age = c(25,65), sex = c(1, 1), degree = c(0, 0)))
library(dplyr)
vars <- c("year", "divorce", "sex", "degree", "childs", "age", "relig", "libcom")
GSS <- data.table::fread(
file.choose(),
sep = ",",
select = vars,
data.table = FALSE)
data <- GSS[, vars]
head(data)
#recoded if a person believes that a book written by a communist should be removed from the library with 1 implying it should be removed and 2 implying it should not
data$libcom <- ifelse(data$libcom == 1, 1,0)
table(data$libcom)
# I also recoded the education level of participants with a 1 representing having college education or above and 0 for any education level below.
data$degree <- ifelse(data$degree >= 3, 1,0)
table(data$degree)
data <- na.omit(data)
lm1 <- lm(libcom ~ age + sex + degree, data)
summary(lm1)
logit1 = glm(libcom ~ age + sex + degree, data = data, family=binomial)
summary(logit1)
exp(coef(logit1))
predict(logit1, type = "response", newdata = data.frame(age = c(25,65), sex = c(1, 1), degree = c(0, 0)))
predict(logit1, type = "response", newdata = data.frame(age = c(25,65), sex = c(0, 1), degree = c(0, 0)))
predict(logit1, type = "response", newdata = data.frame(age = c(25,65), sex = c(1, 1), degree = c(0, 0)))
predict(logit1, type = "response", newdata = data.frame(age = c(25,65), sex = c(1, 1), degree = c(0, 1)))
predict(logit1, type = "response", newdata = data.frame(age = c(25,65), sex = c(0, 1), degree = c(0, 0)))
predict(logit1, type = "response", newdata = data.frame(age = c(25,65), sex = c(1, 1), degree = c(0, 0)))
predict(logit1, type = "response", newdata = data.frame(age = c(25,65), sex = c(1, 1), degree = c(0, 1)))
predict(logit1, type = "response", newdata = data.frame(age = c(25,65), sex = c(0, 1), degree = c(0, 0)))
predict(logit1, type = "response", newdata = data.frame(age = c(25,65), sex = c(0, 1), degree = c(0, 0)))
predict(logit1, type = "response", newdata = data.frame(age = c(25,65), sex = c(0, 0), degree = c(0, 1)))
predict(logit1, type = "response", newdata = data.frame(age = c(25,65), sex = c(0, 0), degree = c(1, 1)))
vars <- c("year", "divorce", "sex", "degree", "childs", "age", "relig", "libcom")
GSS <- data.table::fread(
file.choose(),
sep = ",",
select = vars,
data.table = FALSE)
data <- GSS[, vars]
head(data)
#recoded if a person believes that a book written by a communist should be removed from the library with 1 implying it should be removed and 2 implying it should not
data$libcom <- ifelse(data$libcom == 1, 1,0)
table(data$libcom)
# I also recoded the education level of participants with a 1 representing having college education or above and 0 for any education level below.
data$degree <- ifelse(data$degree >= 3, 1,0)
table(data$degree)
data <- na.omit(data)
lm1 <- lm(libcom ~ age + sex + degree, data)
summary(lm1)
logit1 = glm(libcom ~ age + sex + degree, data = data, family=binomial)
summary(logit1)
exp(coef(logit1))
predict(logit1, type = "response", newdata = data.frame(age = c(25,65), sex = c(1, 1), degree = c(0, 0)))
predict(logit1, type = "response", newdata = data.frame(age = c(25,65), sex = c(0, 1), degree = c(0, 0)))
predict(logit1, type = "response", newdata = data.frame(age = c(25,65), sex = c(0, 0), degree = c(1, 1)))
library(dplyr)
library(rlang)
sessionInfo()
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
sessionInfo(rlang)
sessionInfo()
library(dplyr)
library(tidymodels)
install.packages("tidymodels")
library(ggplot2)
library(ggeasy)
library(tidymodels)
setwd("~/GitHub/DS_Projects/Hotel Demand")
data <- read.csv("hotel_bookings.csv")
hotel_cancel <-  data %>%
group_by(hotel) %>%
summarise(Cancelation_Rate = round(mean(is_canceled)*100,2))
hotel_cancel
Cancelation_by_hotel_type <- ggplot(data = hotel_cancel, aes(x = hotel, y = Cancelation_Rate, label = Cancelation_Rate)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_text(size = 5, position = position_stack(vjust = 0.5)) +
xlab("Type of Hotel") +
ylab("Cancelation Rate (%)") +
ggtitle("Cancelation Rate by Hotel Type") +
theme_classic()+
ggeasy::easy_center_title()
Cancelation_by_hotel_type
family_cancel <- data %>%
mutate(has_children = if_else(children > 0 | babies > 0, 1, 0)) %>%
na.omit()
family_cancel %>%
group_by(hotel) %>%
summarise(freq = round(mean(has_children)*100,2))
family_cancel_1 <- family_cancel %>%
filter(has_children > 0) %>%
group_by(hotel) %>%
summarise(Cancelation_Rate = round(mean(is_canceled)*100,1))
family_cancel_1
Cancelation_by_children <- ggplot(data = family_cancel_1, aes(x = hotel, y = Cancelation_Rate, label = Cancelation_Rate)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_text(size = 5, position = position_stack(vjust = 0.5)) +
xlab("Type of Hotel") +
ylab("Cancelation Rate (%)") +
ggtitle("Cancelation Rate by Hotel Type with Children") +
theme_classic()+
ggeasy::easy_center_title()
Cancelation_by_children
cancel_lead_time <- data %>%
filter(lead_time <= 365) %>%
group_by(lead_time) %>%
summarise(Cancellation_rate = round(mean(is_canceled)*100,1))
cancel_lead_time
cancel_by_lead_time <- ggplot(data = cancel_lead_time, aes(x = lead_time, y = Cancellation_rate)) +
geom_point() +
scale_x_continuous(breaks = c( 14,30,60, 90, 120, 180, 240, 365)) +
xlab("Lead Time") +
ylab("Cancelation Rate (%)") +
ggtitle("Cancelation Rate Based on Lead Time") +
theme_classic()+
ggeasy::easy_center_title()
cancel_by_lead_time
head(data)
Cancelation_by_children
Cancelation_by_hotel_type
region_canceled <- data %>%
group_by(country) %>%
summarise(Cancelelation_Rate = round(mean(is_canceled)*100,2))
region_canceled
data %>%
group_by(country) %>%
count()
data %>%
group_by(country) %>%
count() %>%
arrange(desc(n))
unique(data$distribution_channel)
data %>%
group_by(distribution_channel) %>%
count()
data %>%
filter(hotel == "City Hotel") %>%
group_by(distribution_channel) %>%
count()
data %>%
filter(hotel == "Resort Hotel") %>%
group_by(distribution_channel) %>%
count()
head(data)
city_distribution <- data %>%
filter(hotel == "City Hotel", is_canceled == 1) %>%
group_by(distribution_channel) %>%
count()
city_distribution
city_distribution <- data %>%
filter(hotel == "City Hotel") %>%
group_by(distribution_channel) %>%
sumarise(Cancelations = round(mean(is_canceled)*100,2))
city_distribution <- data %>%
filter(hotel == "City Hotel") %>%
group_by(distribution_channel) %>%
summarise(Cancelations = round(mean(is_canceled)*100,2))
city_distribution
city_distribution_cancel <- ggplot(data = city_distribution, aes(x = distribution_channel, y = Cancelations)) +
geom_bar(stat = "identity") +
xlab("Distribution Channel") +
ylab("Cancelation Rate (%)") +
ggtitle("Cancelation Rate Based on Distribution Channel") +
theme_classic()+
ggeasy::easy_center_title()
city_distribution_cancel
city_distribution <- data %>%
filter(hotel == "City Hotel", is_canceled == 1) %>%
group_by(distribution_channel) %>%
count()
city_distribution
city_distribution_cancel <- ggplot(data = city_distribution, aes(x = distribution_channel, y = Cancelations)) +
geom_bar(stat = "identity") +
xlab("Distribution Channel") +
ylab("Total Cancellations") +
ggtitle("Total Cancelations Based on Distribution Channel") +
theme_classic()+
ggeasy::easy_center_title()
city_distribution_cancel
city_distribution
city_distribution_cancel <- ggplot(data = city_distribution, aes(x = distribution_channel, y = n)) +
geom_bar(stat = "identity") +
xlab("Distribution Channel") +
ylab("Total Cancellations") +
ggtitle("Total Cancelations Based on Distribution Channel") +
theme_classic()+
ggeasy::easy_center_title()
city_distribution_cancel
city_distribution_cancel <- ggplot(data = city_distribution, aes(x = reorder( distribution_channel, -n), y = n)) +
geom_bar(stat = "identity") +
xlab("Distribution Channel") +
ylab("Total Cancellations") +
ggtitle("Total Cancelations Based on Distribution Channel") +
theme_classic()+
ggeasy::easy_center_title()
city_distribution_cancel
city_distribution_cancel <- ggplot(data = city_distribution, aes(x = reorder( distribution_channel, -n), y = n)) +
geom_bar(stat = "identity", fill = "skyblue") +
xlab("Distribution Channel") +
ylab("Total Cancellations") +
ggtitle("Total Cancelations Based on Distribution Channel") +
theme_classic()+
ggeasy::easy_center_title()
city_distribution_cancel
city_distribution_cancel <- ggplot(data = city_distribution, aes(x = reorder( distribution_channel, -n), y = n)) +
geom_bar(stat = "identity", fill = "skyblue") +
xlab("Distribution Channel") +
ylab("Total Cancellations") +
ggtitle("Total City Cancelations Based on Distribution Channel") +
theme_classic()+
ggeasy::easy_center_title()
city_distribution_cancel
resort_distribution <- data %>%
filter(hotel == "Resort Hotel", is_canceled == 1) %>%
group_by(distribution_channel) %>%
count()
resort_distribution
resort_distribution_cancel <- ggplot(data = city_distribution, aes(x = reorder( distribution_channel, -n), y = n)) +
geom_bar(stat = "identity", fill = "skyblue") +
xlab("Distribution Channel") +
ylab("Total Cancellations") +
ggtitle("Total Resort Cancelations Based on Distribution Channel") +
theme_classic()+
ggeasy::easy_center_title()
resort_distribution_cancel
city_distribution_cancel
resort_distribution_cancel <- ggplot(data = resort_distribution, aes(x = reorder( distribution_channel, -n), y = n)) +
geom_bar(stat = "identity", fill = "skyblue") +
xlab("Distribution Channel") +
ylab("Total Cancellations") +
ggtitle("Total Resort Cancelations Based on Distribution Channel") +
theme_classic()+
ggeasy::easy_center_title()
resort_distribution_cancel
resort_distribution
city_distribution_cancel
resort_distribution_cancel
